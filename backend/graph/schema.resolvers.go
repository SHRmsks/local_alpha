package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"log"

	"go.mongodb.org/mongo-driver/bson"
	"iperuranium.com/backend/graph/model"
)

// User is the resolver for the user field.
func (r *dashBoardResolver) User(ctx context.Context, obj *model.DashBoard, id string) (*model.User, error) {
	collection := r.Resolver.MongoDB.Database("GraphQL").Collection("user")
	redisclient := r.Resolver.RedisClient
	var usr model.User

	result, err := redisclient.HGetAll(ctx, id).Result()
	if err != nil || len(result) == 0 {
		log.Println("Redis miss, fetching from MongoDB.")
		err1 := collection.FindOne(ctx, bson.M{"user_id": id}).Decode(&usr)
		if err1 != nil {
			return nil, err1
		}
		redisclient.HSet(ctx, id, map[string]interface{}{
			"username":   usr.Username,
			"occupation": usr.Occupation,
			"networks":   usr.Networks,
			"posts":      usr.Posts,
		})
	} else {
		usr.Username = result["username"]
		// Fetch other details from Redis if necessary
	}
	return &usr, nil
}

// Dashboard is the resolver for the dashboard field.
func (r *queryResolver) Dashboard(ctx context.Context, id string) (*model.DashBoard, error) {
	return &model.DashBoard{
		Title: "test",
	}, nil
}

// DashBoard returns DashBoardResolver implementation.
func (r *Resolver) DashBoard() DashBoardResolver { return &dashBoardResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type dashBoardResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
